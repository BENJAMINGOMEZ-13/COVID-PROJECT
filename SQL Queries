
-- Selecting the data we need

select location, date, total_cases, new_cases, total_deaths, population_density
from [covid deaths]
order by 1,2

-- Analyzing Total Cases vs Total Deaths

select location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as DeathPercentage
from [covid deaths]
order by 1,2

-- Analyzing Total Cases vs Population Density

select location, date, total_cases, population_density, (total_cases/population_density)*100 as PopulationInfected
from [covid deaths]
order by 1,2

-- Analyzing countries with highest infection rate compared to population density

select location, population_density, MAX(total_cases) as HighestInfectionCount, Max((total_cases/population_density))*100 as PopulationInfected
from [covid deaths]
Group by location, population_density
order by PopulationInfected desc

-- Analyzing countries with highest death count per population density

select location, MAX(total_deaths) as TotalDeathCount
from [covid deaths]
where continent is not null
Group by location
order by TotalDeathCount desc  

-- Analyzing by continent

select continent, MAX(total_deaths) as TotalDeathCount
from [covid deaths]
where continent is not null
Group by continent
order by TotalDeathCount desc  

-- Analyzing global numbers //

select SUM(new_cases), SUM(new_deaths), SUM(new_deaths)/SUM(new_cases)*100 as DeathPercentage
from [covid deaths]
where continent is not null
order by 1,2 

-- Join Covid Death table and Covid Vaccination table

select * 
from [covid deaths] dea
join [covid vaccinations] vac
on dea.location = vac.location
   and dea.date = vac.date

-- Analyzing total population versus total vaccination to see total vaccinated people

select dea.continent, dea.location, dea.date, dea.population_density, vac.new_vaccinations
, SUM(convert(int,vac.new_vaccinations)) over (Partition by dea.location order by dea.location, dea.date) as rollingpeoplevaccinated
-- (Rollingpeoplevaccinated/population_density)*100
from [covid deaths] dea
join [covid vaccinations] vac
on dea.location = vac.location
   and dea.date = vac.date
where dea.continent is not null
order by 2,3

-- Use CTE

with PopvsVac (continent, location, date, population_density, new_vaccinations, rollingpeoplevaccinated)
as
(
select dea.continent, dea.location, dea.date, dea.population_density, vac.new_vaccinations
, SUM(convert(int,vac.new_vaccinations)) over (Partition by dea.location order by dea.location, dea.date) as rollingpeoplevaccinated
-- (Rollingpeoplevaccinated/population_density)*100
from [covid deaths] dea
join [covid vaccinations] vac
on dea.location = vac.location
   and dea.date = vac.date
where dea.continent is not null
-- order by 2,3
)
select *, (rollingpeoplevaccinated/population_density)*100
from PopvsVac

-- Temp Table //

Create table #percentpopulationvaccinated
(
continent nvarchar(255),
location nvarchar(255),
date datetime,
population_density numeric,
Rollingpeoplevaccinated numeric
)

insert into #percentpopulationvaccinated
select dea.continent, dea.location, dea.date, dea.population_density, vac.new_vaccinations
, SUM(convert(int,vac.new_vaccinations)) over (Partition by dea.location order by dea.location, dea.date) as rollingpeoplevaccinated
-- (Rollingpeoplevaccinated/population_density)*100
from [covid deaths] dea
join [covid vaccinations] vac
on dea.location = vac.location
   and dea.date = vac.date
where dea.continent is not null
-- order by 2,3

select *, (Rollingpeoplevaccinated/population_density)*100
from #percentpopulationvaccinated


-- Creating view

create view percentagepopulationvaccinated as
select dea.continent, dea.location, dea.date, dea.population_density, vac.new_vaccinations
, SUM(convert(int,vac.new_vaccinations)) over (Partition by dea.location order by dea.location, dea.date) as rollingpeoplevaccinated
-- (Rollingpeoplevaccinated/population_density)*100
from [covid deaths] dea
join [covid vaccinations] vac
on dea.location = vac.location
   and dea.date = vac.date
where dea.continent is not null
-- order by 2,3
